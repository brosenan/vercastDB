
    compareKeys(key1, key2) should compare strings lexicographically
  ․ compareKeys(key1, key2) should compare strings lexicographically
    compareKeys(key1, key2) should compare numbers numerically
  ․ compareKeys(key1, key2) should compare numbers numerically
    compareKeys(key1, key2) should consider an array as more than anything else
  ․ compareKeys(key1, key2) should consider an array as more than anything else
    compareKeys(key1, key2) should compare arrays lexicographically
  ․ compareKeys(key1, key2) should compare arrays lexicographically
    compareKeys(key1, key2) should treat prefix arrays as less than longer arrays
  ․ compareKeys(key1, key2) should treat prefix arrays as less than longer arrays
    compareKeys(key1, key2) should recurse to compare nested arrays
  ․ compareKeys(key1, key2) should recurse to compare nested arrays
    compareKeys(key1, key2) should be able to compare proxies (objects with get() and set() methods) to real arrays
  ․ compareKeys(key1, key2) should be able to compare proxies (objects with get() and set() methods) to real arrays
    JsMapper should map values to patches based on Javascript code
  ․ JsMapper should map values to patches based on Javascript code
    .loadModule(ctx, rootID, key) [async] should return a module for the given Javascript code
  ․ .loadModule(ctx, rootID, key) [async] should return a module for the given Javascript code
    .loadModule(ctx, rootID, key) [async] should not give the module access to gloabls
  ․ .loadModule(ctx, rootID, key) [async] should not give the module access to gloabls
  - .loadModule(ctx, rootID, key) [async] should interpret require() as loading of other modules under the same root
    Text get{} should return the content of the text object
  ․ Text get{} should return the content of the text object
    Text patch{patch} should apply the given patch to the text
  ․ Text patch{patch} should apply the given patch to the text
    Text patch{patch} should report a conflict if one is detected
  ․ Text patch{patch} should report a conflict if one is detected
    Text patch{patch} should allow merges
  ․ Text patch{patch} should allow merges
    Text put{value} should modify the text to the given value
  ․ Text put{value} should modify the text to the given value
    textutil .revertPatches(patch) should revert a patch
  ․ textutil .revertPatches(patch) should revert a patch
    textutil .revertPatches(patch) should handle more complex strings
  ․ textutil .revertPatches(patch) should handle more complex strings
    Treap should apply patches to different objects, by the patch's _key attribute
  ․ Treap should apply patches to different objects, by the patch's _key attribute
    Treap should not count nodes containing values that match the default value
  ․ Treap should not count nodes containing values that match the default value
    Treap should be mostly balanced
  ․ Treap should be mostly balanced
    Treap should add the key to _reapply patches received from the value
  ․ Treap should add the key to _reapply patches received from the value
    Treap _keys{limit?, start?} should return a sorted list of the keys in the tree
  ․ Treap _keys{limit?, start?} should return a sorted list of the keys in the tree
    Treap _keys{limit?, start?} should not give more results then the given limit, if provided
  ․ Treap _keys{limit?, start?} should not give more results then the given limit, if provided
    Treap _keys{limit?, start?} should start at the given start position if given
  ․ Treap _keys{limit?, start?} should start at the given start position if given
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should call the given mapper's map patch with all the non-default values in the range
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should call the given mapper's map patch with all the non-default values in the range
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should effect the patches that are returned by the mapper
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should effect the patches that are returned by the mapper
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should make future changes to the range have the effect returned by the mapper
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should make future changes to the range have the effect returned by the mapper
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should support cases where the range is empty before creating the map
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should support cases where the range is empty before creating the map
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should work properly even at the event of a rotation
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should work properly even at the event of a rotation
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should support multiple ranges
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should support multiple ranges
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should emit the inverse of the patch corresponding to the previous value before the patch corresponding to the new value
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should emit the inverse of the patch corresponding to the previous value before the patch corresponding to the new value
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should cancel the inverse and direct patch if they are equal
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should cancel the inverse and direct patch if they are equal
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should return the ID of the mapping as a string
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should return the ID of the mapping as a string
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should conflict if such mapping already exists
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should conflict if such mapping already exists
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should conflict if such mapping already exists (non-empty case)
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should conflict if such mapping already exists (non-empty case)
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should not conflict if given the old mapping ID
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should not conflict if given the old mapping ID
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should not conflict if given the old mapping ID (non empty case)
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should not conflict if given the old mapping ID (non empty case)
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should effect the inverse of what has been effected by a mapping when removed
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should effect the inverse of what has been effected by a mapping when removed
    Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should eliminate patches that do not change due to the mapping replacement
  ․ Treap _remap{mapper?, oldMapping?, keyFrom, keyTo} should eliminate patches that do not change due to the mapping replacement
    Treap _get_ver{_key} should return the version ID of the value corresponding to the given key
  ․ Treap _get_ver{_key} should return the version ID of the value corresponding to the given key

  40 passing (3s)
  1 pending

